package com.fjaviermo.geotasker.databases;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

public class ProfilesSqlitehelper extends SQLiteOpenHelper {
 
	private static final String DATABASE_NAME = "GeoTasker.db";
	private static final String DATABASE_TABLE = "Profiles";
	private static final int DATABASE_VERSION = 1;

	// SQL Statement to create a new database.
	private static final String DATABASE_CREATE = "create table " +
	DATABASE_TABLE + " (" + KEY_ID +
	" integer primary key autoincrement, " +
	KEY_GOLD_HOARD_NAME_COLUMN + " text not null, " +
	KEY_GOLD_HOARDED_COLUMN + " float, " +
	KEY_GOLD_HOARD_ACCESSIBLE_COLUMN + " integer);";

	
    //Sentencia SQL para crear la tabla de Clientes
    String sqlCreate = "CREATE TABLE Profiles " + 
                       "(_id INTEGER PRIMARY KEY AUTOINCREMENT, " +
    		           " name TEXT, " + " active INTEGER)";
 
    public ProfilesSqlitehelper(Context context, String name,
                               CursorFactory factory, int version) {
    	
        super(context, name, factory, version);      
    }
 
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(sqlCreate);
    }
 
    @Override
    public void onUpgrade(SQLiteDatabase db, int versionAnterior, int versionNueva) {
    	//FIXME
    	// Log the version upgrade.
    	Log.w("TaskDBAdapter", "Upgrading from version " +
    	oldVersion + " to " +
    	newVersion + ", which will destroy all old data");"
    	// Upgrade the existing database to conform to the new
    	// version. Multiple previous versions can be handled by
    	// comparing oldVersion and newVersion values.
    	// The simplest case is to drop the old table and create a new one.
    	db.execSQL("DROP TABLE IF IT EXISTS " + DATABASE_TABLE);
    	// Create a new one.
    	onCreate(db);

    }
}
