package com.fjaviermo.dao;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

import com.fjaviermo.database.DatabaseHelper;
import com.fjaviermo.database.LocationSQLiteHelper;
import com.fjaviermo.database.ProfilesSQLiteHelper;
import com.fjaviermo.model.Location;
import com.fjaviermo.model.Profile;

public class LocationDataSource {
	// Database fields
	private SQLiteDatabase database;
	private DatabaseHelper dbHelper;
	private String[] allColumns = { 
			LocationSQLiteHelper.COLUMN_ID,
			LocationSQLiteHelper.COLUMN_ID_PROFILE,
			LocationSQLiteHelper.COLUMN_LATITUDE,
			LocationSQLiteHelper.COLUMN_LONGITUDE,
			LocationSQLiteHelper.COLUMN_TYPE
	};

	public LocationDataSource(Context context) {
		dbHelper = new DatabaseHelper(context);
	}

	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}

	public void close() {
		dbHelper.close();
	}

	public Location createLocation(long id_profile, long latitude, long longitude, Location.Type type) {
		ContentValues values = new ContentValues();
		values.put(LocationSQLiteHelper.COLUMN_ID_PROFILE, id_profile);
		values.put(LocationSQLiteHelper.COLUMN_LATITUDE, latitude);
		values.put(LocationSQLiteHelper.COLUMN_LONGITUDE, longitude);
		values.put(LocationSQLiteHelper.COLUMN_TYPE, type);

		long insertId = database.insert(LocationSQLiteHelper.TABLE_NAME, null,
				values);
		Cursor cursor = database.query(LocationSQLiteHelper.TABLE_NAME,
				allColumns, LocationSQLiteHelper.COLUMN_ID + " = " + insertId, null,
				null, null, null);
		cursor.moveToFirst();
		Location newLocation = cursorToProfile(cursor);
		cursor.close();
		
		return newLocation;
	}

	public void deleteLocation(Location location) {
		long id = location.getId();
		System.out.println("Location deleted with id: " + id);
		database.delete(LocationSQLiteHelper.TABLE_NAME, 
				LocationSQLiteHelper.COLUMN_ID
				        + " = " + id, null);
	}

	public List<Location> getAllLocations() {
		List<Location> locations = new ArrayList<Location>();
		Cursor cursor = database.query(LocationSQLiteHelper.TABLE_NAME,
				allColumns, null, null, null, null, null);
		cursor.moveToFirst();
		while (!cursor.isAfterLast()) {
			Location location = cursorToProfile(cursor);
			locations.add(location);
			cursor.moveToNext();
		}
		// make sure to close the cursor
		cursor.close();
		
		return locations;
	}

	private Location cursorToLocation(Cursor cursor) {
		Location location = new Location();		
		location.setId(cursor.getLong(cursor.getColumnIndex(LocationSQLiteHelper.COLUMN_ID)));
		location.setIdProfile(cursor.getLong(cursor.getColumnIndex(LocationSQLiteHelper.COLUMN_ID_PROFILE)));
		location.setActive(cursor.getInt(cursor.getColumnIndex(LocationSQLiteHelper.COLUMN_ACTIVE)) == 1);
		
		return location;
	}
}
